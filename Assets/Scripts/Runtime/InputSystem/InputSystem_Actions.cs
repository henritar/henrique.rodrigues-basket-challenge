//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Runtime/InputSystem/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8f116e7f-0caf-4b7a-aad5-d104112ead6f"",
            ""actions"": [
                {
                    ""name"": ""PlainClick"",
                    ""type"": ""Button"",
                    ""id"": ""38557fd0-b133-4ad1-9f67-10514637d6c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrepareShoot"",
                    ""type"": ""Button"",
                    ""id"": ""2b989672-53fa-401f-ae2e-2e47a968a2c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""739ffd9f-6ca5-4a6a-af7c-da2be45a0715"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPos"",
                    ""type"": ""Value"",
                    ""id"": ""c8014bde-d762-4ba7-b39d-57db721c31f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14f060ec-1225-4562-91c3-f200e317d352"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""PrepareShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d3b0bc-9476-4b10-8661-39a631aecf1d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""ScreenPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaf5e14e-bb44-47a7-9876-728d95bce99f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2cba42a-ab8d-4172-aaea-1f0e852cadf5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""PlainClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_PlainClick = m_Gameplay.FindAction("PlainClick", throwIfNotFound: true);
        m_Gameplay_PrepareShoot = m_Gameplay.FindAction("PrepareShoot", throwIfNotFound: true);
        m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_ScreenPos = m_Gameplay.FindAction("ScreenPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_PlainClick;
    private readonly InputAction m_Gameplay_PrepareShoot;
    private readonly InputAction m_Gameplay_Shoot;
    private readonly InputAction m_Gameplay_ScreenPos;
    public struct GameplayActions
    {
        private @InputSystem_Actions m_Wrapper;
        public GameplayActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlainClick => m_Wrapper.m_Gameplay_PlainClick;
        public InputAction @PrepareShoot => m_Wrapper.m_Gameplay_PrepareShoot;
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
        public InputAction @ScreenPos => m_Wrapper.m_Gameplay_ScreenPos;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @PlainClick.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlainClick;
                @PlainClick.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlainClick;
                @PlainClick.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlainClick;
                @PrepareShoot.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrepareShoot;
                @PrepareShoot.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrepareShoot;
                @PrepareShoot.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPrepareShoot;
                @Shoot.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @ScreenPos.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScreenPos;
                @ScreenPos.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScreenPos;
                @ScreenPos.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScreenPos;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlainClick.started += instance.OnPlainClick;
                @PlainClick.performed += instance.OnPlainClick;
                @PlainClick.canceled += instance.OnPlainClick;
                @PrepareShoot.started += instance.OnPrepareShoot;
                @PrepareShoot.performed += instance.OnPrepareShoot;
                @PrepareShoot.canceled += instance.OnPrepareShoot;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ScreenPos.started += instance.OnScreenPos;
                @ScreenPos.performed += instance.OnScreenPos;
                @ScreenPos.canceled += instance.OnScreenPos;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnPlainClick(InputAction.CallbackContext context);
        void OnPrepareShoot(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnScreenPos(InputAction.CallbackContext context);
    }
}
